{"ast":null,"code":"import { NgxEchartsDirective, provideEcharts } from 'ngx-echarts';\nimport * as i0 from \"@angular/core\";\nexport let EchartComponent = /*#__PURE__*/(() => {\n  class EchartComponent {\n    allTimeChartOptions;\n    oneDayChartOptions;\n    weekChartOptions;\n    constructor() {}\n    ngOnInit() {\n      this.fillAllTimeChart();\n      this.filloneDayChartOptions();\n      this.fillweekChartOptions();\n    }\n    fillweekChartOptions() {\n      let DayOfWeek = this.getDayOfWeek();\n      console.log(DayOfWeek);\n      let numberAppointment = [];\n      for (let day in DayOfWeek) {\n        numberAppointment.push(DayOfWeek[day]);\n      }\n      this.weekChartOptions = {\n        title: {\n          text: 'График записей по дням недели'\n        },\n        tooltip: {},\n        legend: {\n          right: \"0%\",\n          data: ['Записи']\n        },\n        xAxis: {\n          data: ['Воскресенье', 'Понедельик', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота']\n        },\n        yAxis: {},\n        series: [{\n          name: 'Записи',\n          type: 'bar',\n          data: numberAppointment\n        }]\n      };\n    }\n    filloneDayChartOptions() {\n      let mapOneDay = this.getOneDayMap();\n      let workersArr = [];\n      for (let worker of mapOneDay.keys()) {\n        workersArr.push(worker);\n      }\n      let numberRecords = [];\n      for (let count of mapOneDay.values()) {\n        numberRecords.push(count);\n      }\n      this.oneDayChartOptions = {\n        title: {\n          text: 'График записей на сегодня'\n        },\n        tooltip: {},\n        legend: {\n          right: \"0%\",\n          data: ['Записи']\n        },\n        xAxis: {\n          data: workersArr\n        },\n        yAxis: {},\n        series: [{\n          name: 'Записи',\n          type: 'bar',\n          data: numberRecords\n        }]\n      };\n    }\n    fillAllTimeChart() {\n      let AllTimeMap = this.getAllTimeMap();\n      let employeeArray = [];\n      for (let employee of AllTimeMap.keys()) {\n        employeeArray.push(employee);\n      }\n      let numberRecords = [];\n      for (let count of AllTimeMap.values()) {\n        numberRecords.push(count);\n      }\n      this.allTimeChartOptions = {\n        title: {\n          text: 'График записей за все время'\n        },\n        tooltip: {},\n        legend: {\n          right: \"0%\",\n          data: ['Записи']\n        },\n        xAxis: {\n          data: employeeArray\n        },\n        yAxis: {},\n        series: [{\n          name: 'Записи',\n          type: 'bar',\n          data: numberRecords\n        }]\n      };\n    }\n    getAllTimeMap() {\n      let mapAllTime = new Map();\n      for (let i = 0; i < localStorage.length; i++) {\n        let key = localStorage.key(i);\n        let [keyWorkerName, keyRecordDate, keyTime] = key.split(',');\n        if (mapAllTime.has(keyWorkerName)) {\n          mapAllTime.set(keyWorkerName, mapAllTime.get(keyWorkerName) + 1);\n        } else {\n          mapAllTime.set(keyWorkerName, 1);\n        }\n      }\n      return mapAllTime;\n    }\n    getOneDayMap() {\n      let mapOneDay = new Map();\n      for (let i = 0; i < localStorage.length; i++) {\n        let key = localStorage.key(i);\n        let [keyWorkerName, keyRecordDate, keyTime] = key.split(',');\n        let today = new Date();\n        let dd = String(today.getDate()).padStart(2, '0');\n        let mm = String(today.getMonth() + 1).padStart(2, '0');\n        let yyyy = today.getFullYear();\n        let todayStr = dd + '.' + mm + '.' + yyyy;\n        if (keyRecordDate == todayStr) {\n          if (mapOneDay.has(keyWorkerName)) {\n            mapOneDay.set(keyWorkerName, mapOneDay.get(keyWorkerName) + 1);\n          } else {\n            mapOneDay.set(keyWorkerName, 1);\n          }\n        }\n      }\n      return mapOneDay;\n    }\n    getDayOfWeek() {\n      let countDayOfWeek = {\n        sunday: 0,\n        monday: 0,\n        tuesday: 0,\n        wednesday: 0,\n        thursday: 0,\n        friday: 0,\n        saturday: 0\n      };\n      for (let i = 0; i < localStorage.length; i++) {\n        let key = localStorage.key(i);\n        let [keyWorkerName, keyRecordDate, keyTime] = key.split(',');\n        keyRecordDate = keyRecordDate.replace('.', '-');\n        let date = new Date(keyRecordDate);\n        console.log(date);\n        let dayOfWeek = date.getDay();\n        switch (dayOfWeek) {\n          case 0:\n            countDayOfWeek.sunday += 1;\n            break;\n          case 1:\n            countDayOfWeek.monday += 1;\n            break;\n          case 2:\n            countDayOfWeek.tuesday += 1;\n            break;\n          case 3:\n            countDayOfWeek.wednesday += 1;\n            break;\n          case 4:\n            countDayOfWeek.thursday += 1;\n            break;\n          case 5:\n            countDayOfWeek.friday += 1;\n            break;\n          case 6:\n            countDayOfWeek.saturday += 1;\n            break;\n        }\n      }\n      return countDayOfWeek;\n    }\n    static ɵfac = function EchartComponent_Factory(t) {\n      return new (t || EchartComponent)();\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EchartComponent,\n      selectors: [[\"echart\"]],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([provideEcharts()]), i0.ɵɵStandaloneFeature],\n      decls: 5,\n      vars: 3,\n      consts: [[\"echarts\", \"\", 3, \"options\"]],\n      template: function EchartComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"Echart\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(2, \"div\", 0)(3, \"div\", 0)(4, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"options\", ctx.allTimeChartOptions);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"options\", ctx.oneDayChartOptions);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"options\", ctx.weekChartOptions);\n        }\n      },\n      dependencies: [NgxEchartsDirective]\n    });\n  }\n  return EchartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}